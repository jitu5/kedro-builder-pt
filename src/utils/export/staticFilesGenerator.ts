/**
 * Generate static configuration files for Kedro project
 */

export interface ProjectMetadata {
  projectName: string;
  pythonPackage: string;
  pipelineName: string;
  description?: string;
}

/**
 * Generate logging.yml configuration
 */
export function generateLoggingConfig(pythonPackage: string): string {
  return `# Logging configuration
# Generated by Kedro Pipeline Builder

version: 1
disable_existing_loggers: false

formatters:
  simple:
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  detailed:
    format: "%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s"

handlers:
  console:
    class: logging.StreamHandler
    level: INFO
    formatter: simple
    stream: ext://sys.stdout

  info_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: detailed
    filename: logs/info.log
    maxBytes: 10485760  # 10MB
    backupCount: 20
    encoding: utf8

  error_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: detailed
    filename: logs/error.log
    maxBytes: 10485760  # 10MB
    backupCount: 20
    encoding: utf8

loggers:
  kedro:
    level: INFO
    handlers: [console, info_file_handler, error_file_handler]
    propagate: false

  ${pythonPackage}:
    level: INFO
    handlers: [console, info_file_handler, error_file_handler]
    propagate: false

root:
  level: INFO
  handlers: [console, info_file_handler, error_file_handler]
`;
}

/**
 * Generate parameters.yml configuration
 */
export function generateParametersConfig(): string {
  return `# Pipeline parameters
# Generated by Kedro Pipeline Builder
#
# Define your pipeline parameters here. These can be accessed in your nodes
# using the 'parameters' keyword in the pipeline definition.
#
# Example:
# model:
#   learning_rate: 0.01
#   n_estimators: 100

# Add your parameters here
`;
}

/**
 * Generate credentials.yml template
 */
export function generateCredentialsTemplate(): string {
  return `# Credentials
# Generated by Kedro Pipeline Builder
#
# This file should contain sensitive information like API keys, passwords, etc.
# Never commit this file to version control!
#
# Example:
# database:
#   username: your_username
#   password: your_password
#   host: localhost
#   port: 5432

# Add your credentials here
`;
}

/**
 * Generate .gitignore file
 */
export function generateGitignore(): string {
  return `##########################
# KEDRO PROJECT

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Kedro
data/**
!data/.gitkeep
logs/**
!logs/.gitkeep
.kedro/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# IDEs
.idea/
.vscode/
*.swp
*.swo
*~
.DS_Store

# Credentials
conf/**/*credentials*
!conf/**/credentials.yml

# Kedro-viz
.kedro_viz
`;
}

/**
 * Generate README.md file
 */
export function generateReadme(metadata: ProjectMetadata): string {
  const { projectName, pythonPackage, pipelineName, description } = metadata;

  return `# ${projectName}

${description || 'A Kedro project generated by Kedro Pipeline Builder'}

## Overview

This project was generated using the [Kedro Pipeline Builder](https://github.com/your-repo/kedro-builder), a visual tool for creating Kedro pipelines.

## Project Structure

\`\`\`
${pythonPackage}/
├── conf/                   # Configuration files
│   ├── base/              # Base configuration
│   │   ├── catalog.yml    # Data catalog
│   │   ├── parameters.yml # Pipeline parameters
│   │   └── logging.yml    # Logging configuration
│   └── local/             # Local overrides (gitignored)
│       └── credentials.yml
├── data/                   # Data files (gitignored)
│   ├── 01_raw/
│   ├── 02_intermediate/
│   ├── 03_primary/
│   ├── 04_feature/
│   ├── 05_model_input/
│   ├── 06_models/
│   ├── 07_model_output/
│   └── 08_reporting/
├── logs/                   # Log files (gitignored)
├── src/                    # Source code
│   └── ${pythonPackage}/
│       ├── pipelines/
│       │   └── ${pipelineName}/
│       │       ├── nodes.py          # Node functions
│       │       └── pipeline.py       # Pipeline definition
│       ├── pipeline_registry.py      # Register pipelines
│       └── settings.py               # Project settings
├── pyproject.toml          # Project metadata and dependencies
└── README.md               # This file
\`\`\`

## Getting Started

### Prerequisites

- Python 3.9+
- pip

### Installation

1. **Create a virtual environment** (recommended):
   \`\`\`bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\\Scripts\\activate
   \`\`\`

2. **Install the project**:
   \`\`\`bash
   pip install -e .
   \`\`\`

   This will install Kedro and all required dependencies.

### Running the Pipeline

Run the default pipeline:
\`\`\`bash
kedro run
\`\`\`

Run a specific pipeline:
\`\`\`bash
kedro run --pipeline ${pipelineName}
\`\`\`

### Visualize with Kedro-Viz

Kedro-Viz is a visualization tool for Kedro pipelines:

\`\`\`bash
kedro viz
\`\`\`

This will start a local web server and open the visualization in your browser.

## Next Steps

1. **Implement the TODO sections** in \`src/${pythonPackage}/pipelines/${pipelineName}/nodes.py\`
2. **Add your data** to the appropriate \`data/\` folders
3. **Configure datasets** in \`conf/base/catalog.yml\` if needed
4. **Add parameters** in \`conf/base/parameters.yml\` if needed
5. **Add credentials** in \`conf/local/credentials.yml\` (don't commit this!)
6. **Run your pipeline** with \`kedro run\`
7. **Visualize** with \`kedro viz\`

## Useful Commands

- \`kedro run\` - Run the pipeline
- \`kedro viz\` - Visualize the pipeline
- \`kedro jupyter notebook\` - Start Jupyter Notebook
- \`kedro test\` - Run tests
- \`kedro lint\` - Lint the code
- \`kedro package\` - Package the project

## Documentation

- [Kedro Documentation](https://docs.kedro.org)
- [Kedro Tutorial](https://docs.kedro.org/en/stable/tutorial/tutorial_template.html)
- [Kedro API Reference](https://docs.kedro.org/en/stable/kedro.html)

## Support

For issues or questions, please refer to:
- [Kedro GitHub](https://github.com/kedro-org/kedro)
- [Kedro Slack](https://slack.kedro.org)

---

**Generated by Kedro Pipeline Builder** ✨
`;
}

/**
 * Generate empty __init__.py file
 */
export function generateInitPy(): string {
  return '"""Project package."""\n';
}

/**
 * Generate .gitkeep file for empty directories
 */
export function generateGitkeep(): string {
  return '# This file keeps the directory in Git\n';
}
