/**
 * Generate Kedro catalog.yml from datasets
 */

import type { KedroDataset } from '../../types/kedro';
import { inferDataLayer, getFileExtension, escapeYamlString } from './helpers';

/**
 * Dataset type mapping from UI to Kedro
 */
const DATASET_TYPE_MAPPING: Record<string, string> = {
  csv: 'pandas.CSVDataset',
  parquet: 'pandas.ParquetDataset',
  excel: 'pandas.ExcelDataset',
  json: 'pandas.JSONDataset',
  pickle: 'pandas.PickleDataset',
  feather: 'pandas.FeatherDataset',
  hdf: 'pandas.HDFDataset',
  sql: 'pandas.SQLTableDataset',
  text: 'text.TextDataset',
  yaml: 'yaml.YAMLDataset',
};

/**
 * Generate catalog.yml content
 */
export function generateCatalog(datasets: KedroDataset[]): string {
  const header = `# Data Catalog
# Generated by Kedro Pipeline Builder
#
# Here you can define all your data sources, such as CSV files, databases,
# and custom data loaders. Kedro supports a variety of data formats and
# storage systems.
#
# Documentation: https://docs.kedro.org/en/stable/data/data_catalog.html

`;

  if (datasets.length === 0) {
    return header + '# No datasets defined\n';
  }

  const entries = datasets.map((ds) => generateCatalogEntry(ds));

  return header + entries.join('\n\n') + '\n';
}

/**
 * Generate a single catalog entry
 */
function generateCatalogEntry(dataset: KedroDataset): string {
  const datasetName = dataset.name;

  // Determine Kedro dataset type
  const kedroType = dataset.type
    ? DATASET_TYPE_MAPPING[dataset.type.toLowerCase()] || dataset.type
    : 'pandas.CSVDataset';

  // Generate filepath if not provided
  const filepath = dataset.filepath || inferFilepath(dataset.name, kedroType);

  let entry = `${datasetName}:
  type: ${kedroType}`;

  // Add filepath for non-memory datasets
  if (kedroType !== 'MemoryDataset') {
    entry += `\n  filepath: ${escapeYamlString(filepath)}`;
  }

  // Add layer if specified
  if (dataset.layer) {
    entry += `\n  layer: ${dataset.layer}`;
  }

  // Add versioning if needed (optional for future enhancement)
  // if (dataset.versioned) {
  //   entry += `\n  versioned: true`;
  // }

  return entry;
}

/**
 * Infer filepath from dataset name and type
 */
function inferFilepath(name: string, kedroType: string): string {
  const layer = inferDataLayer(name);
  const extension = getFileExtension(kedroType);

  return `data/${layer}/${name}${extension}`;
}
