/**
 * @vitest-environment node
 */
import { describe, it, expect } from 'vitest';
import { generateCatalog } from './catalogGenerator';
import { KedroDataset } from '../../types/kedro';

describe('catalogGenerator', () => {
  describe('generateCatalog', () => {
    it('should generate header with empty datasets', () => {
      const result = generateCatalog([]);

      expect(result).toContain('# Data Catalog');
      expect(result).toContain('# Generated by Kedro Pipeline Builder');
      expect(result).toContain('# No datasets defined');
    });

    it('should generate catalog entry for CSV dataset', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'raw_data',
        type: 'csv',
        filepath: 'data/01_raw/raw_data.csv',
        layer: '01_raw',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('raw_data:');
      expect(result).toContain('type: pandas.CSVDataset');
      expect(result).toContain('filepath: data/01_raw/raw_data.csv');
      expect(result).toContain('layer: 01_raw');
    });

    it('should generate catalog entry for Parquet dataset', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'processed_data',
        type: 'parquet',
        filepath: 'data/02_intermediate/processed_data.parquet',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('processed_data:');
      expect(result).toContain('type: pandas.ParquetDataset');
      expect(result).toContain('filepath: data/02_intermediate/processed_data.parquet');
    });

    it('should generate catalog entry for Pickle dataset', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'model',
        type: 'pickle',
        filepath: 'data/06_models/model.pkl',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('model:');
      expect(result).toContain('type: pandas.PickleDataset');
      expect(result).toContain('filepath: data/06_models/model.pkl');
    });

    it('should generate catalog entry for JSON dataset', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'metrics',
        type: 'json',
        filepath: 'data/08_reporting/metrics.json',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('metrics:');
      expect(result).toContain('type: pandas.JSONDataset');
      expect(result).toContain('filepath: data/08_reporting/metrics.json');
    });

    it('should generate catalog entry for YAML dataset', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'config',
        type: 'yaml',
        filepath: 'conf/base/parameters.yml',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('config:');
      expect(result).toContain('type: yaml.YAMLDataset');
      expect(result).toContain('filepath: conf/base/parameters.yml');
    });

    it('should generate catalog entry for Text dataset', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'readme',
        type: 'text',
        filepath: 'data/01_raw/readme.txt',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('readme:');
      expect(result).toContain('type: text.TextDataset');
      expect(result).toContain('filepath: data/01_raw/readme.txt');
    });

    it('should generate catalog entry for Memory dataset without filepath', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'temp_data',
        type: 'memory',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('temp_data:');
      expect(result).toContain('type: MemoryDataset');
      expect(result).not.toContain('filepath:');
    });

    it('should auto-generate filepath when not provided', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'my_data',
        type: 'csv',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('filepath: data/01_raw/my_data.csv');
      expect(result).toContain('# Auto-generated â€“ update with your actual data location');
    });

    it('should not add auto-generated comment when user provides filepath', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'my_data',
        type: 'csv',
        filepath: 'custom/path/data.csv',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('filepath: custom/path/data.csv');
      expect(result).not.toContain('# Auto-generated');
    });

    it('should include layer when specified', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'processed_data',
        type: 'parquet',
        layer: '02_intermediate',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('layer: 02_intermediate');
    });

    it('should not include layer when not specified', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'data',
        type: 'csv',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).not.toContain('layer:');
    });

    it('should include versioned flag when enabled', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'model',
        type: 'pickle',
        versioned: true,
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('versioned: true');
    });

    it('should not include versioned flag when false', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'data',
        type: 'csv',
        versioned: false,
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).not.toContain('versioned:');
    });

    it('should not include versioned flag for Memory datasets', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'temp_data',
        type: 'memory',
        versioned: true,
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).not.toContain('versioned:');
    });

    it('should generate multiple catalog entries separated by blank lines', () => {
      const datasets: KedroDataset[] = [
        {
          id: 'dataset-1',
          name: 'raw_data',
          type: 'csv',
          position: { x: 0, y: 0 },
        },
        {
          id: 'dataset-2',
          name: 'processed_data',
          type: 'parquet',
          position: { x: 0, y: 0 },
        },
      ];

      const result = generateCatalog(datasets);

      expect(result).toContain('raw_data:');
      expect(result).toContain('processed_data:');
      // Entries should be separated by double newline
      expect(result).toMatch(/raw_data:.*\n\n.*processed_data:/s);
    });

    it('should infer layer from dataset name containing "raw"', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'raw_sales_data',
        type: 'csv',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('filepath: data/01_raw/raw_sales_data.csv');
    });

    it('should infer layer from dataset name containing "model"', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'trained_model',
        type: 'pickle',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('filepath: data/06_models/trained_model.pkl');
    });

    it('should infer layer from dataset name containing "intermediate"', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'intermediate_data',
        type: 'parquet',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('filepath: data/02_intermediate/intermediate_data.parquet');
    });

    it('should infer layer from dataset name containing "feature"', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'feature_data',
        type: 'parquet',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('filepath: data/04_feature/feature_data.parquet');
    });

    it('should infer layer from dataset name containing "report"', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'report_metrics',
        type: 'json',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('filepath: data/08_reporting/report_metrics.json');
    });

    it('should use correct file extension for Pickle type', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'model',
        type: 'pickle',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('.pkl');
    });

    it('should use correct file extension for Parquet type', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'data',
        type: 'parquet',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('.parquet');
    });

    it('should use correct file extension for Excel type', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'spreadsheet',
        type: 'excel',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('.xlsx');
    });

    it('should handle dataset name with spaces by converting to snake_case', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'My Sales Data',
        type: 'csv',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      // Name should be preserved as-is in YAML key
      expect(result).toContain('My Sales Data:');
      // But filepath should use snake_case
      expect(result).toContain('my_sales_data.csv');
    });

    it('should handle SQL Table dataset type', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'sql_data',
        type: 'sql_table',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('type: pandas.SQLTableDataset');
      // SQL datasets get filepath in auto-generated path
      expect(result).toContain('filepath: data/01_raw/sql_data');
    });

    it('should handle SQL Query dataset type', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'query_results',
        type: 'sql_query',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('type: pandas.SQLQueryDataset');
    });

    it('should escape filepath with special YAML characters', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'data',
        type: 'csv',
        filepath: 'data/path:with@special#chars.csv',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      // Should be quoted due to special chars
      expect(result).toMatch(/filepath: "data\/path:with@special#chars\.csv"/);
    });

    it('should handle empty filepath by treating it as not provided', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'my_data',
        type: 'csv',
        filepath: '   ',  // Whitespace only
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      // Should auto-generate filepath
      expect(result).toContain('filepath: data/01_raw/my_data.csv');
      expect(result).toContain('# Auto-generated');
    });

    it('should preserve user filepath exactly as provided and escape if needed', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'data',
        type: 'csv',
        filepath: 's3://my-bucket/path/to/data.csv',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      // S3 paths with : should be quoted
      expect(result).toContain('filepath: "s3://my-bucket/path/to/data.csv"');
    });

    it('should handle unknown dataset type by using it as-is', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'custom_data',
        type: 'custom.MyCustomDataset' as any,
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('type: custom.MyCustomDataset');
    });

    it('should generate complete catalog with all features', () => {
      const dataset: KedroDataset = {
        id: 'dataset-1',
        name: 'processed_model_input',
        type: 'parquet',
        filepath: 'data/05_model_input/features.parquet',
        layer: '05_model_input',
        versioned: true,
        description: 'Feature engineering output',
        position: { x: 0, y: 0 },
      };

      const result = generateCatalog([dataset]);

      expect(result).toContain('processed_model_input:');
      expect(result).toContain('type: pandas.ParquetDataset');
      expect(result).toContain('filepath: data/05_model_input/features.parquet');
      expect(result).toContain('layer: 05_model_input');
      expect(result).toContain('versioned: true');
      expect(result).not.toContain('# Auto-generated');
    });

    it('should generate catalog with realistic full pipeline', () => {
      const datasets: KedroDataset[] = [
        {
          id: '1',
          name: 'raw_customer_data',
          type: 'csv',
          layer: '01_raw',
          filepath: 'data/01_raw/customers.csv',
          position: { x: 0, y: 0 },
        },
        {
          id: '2',
          name: 'cleaned_data',
          type: 'parquet',
          layer: '02_intermediate',
          versioned: true,
          position: { x: 0, y: 0 },
        },
        {
          id: '3',
          name: 'feature_engineered',
          type: 'parquet',
          layer: '04_feature',
          versioned: true,
          position: { x: 0, y: 0 },
        },
        {
          id: '4',
          name: 'trained_model',
          type: 'pickle',
          layer: '06_models',
          versioned: true,
          position: { x: 0, y: 0 },
        },
        {
          id: '5',
          name: 'predictions',
          type: 'json',
          layer: '07_model_output',
          position: { x: 0, y: 0 },
        },
      ];

      const result = generateCatalog(datasets);

      expect(result).toContain('raw_customer_data:');
      expect(result).toContain('cleaned_data:');
      expect(result).toContain('feature_engineered:');
      expect(result).toContain('trained_model:');
      expect(result).toContain('predictions:');
      expect(result).toContain('versioned: true');
    });
  });
});
