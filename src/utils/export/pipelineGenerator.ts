/**
 * Generate Kedro pipeline.py from pipeline structure
 */

import type { KedroNode, KedroDataset, KedroConnection } from '../../types/kedro';
import { toSnakeCase, formatNodeInputs, formatNodeOutputs } from './helpers';

/**
 * Generate pipeline.py content
 */
export function generatePipeline(
  nodes: KedroNode[],
  connections: KedroConnection[],
  datasets: Record<string, KedroDataset>,
  pipelineName: string
): string {
  // Generate function imports
  const funcNames = nodes.map((n) => toSnakeCase(n.name));
  const imports = funcNames.length > 0 ? funcNames.join(', ') : '';

  // Generate node definitions
  const nodeDefinitions = nodes.map((node) =>
    generateNodeDefinition(node, connections, datasets)
  );

  const nodesStr =
    nodeDefinitions.length > 0
      ? nodeDefinitions.map((n) => `            ${n},`).join('\n')
      : '';

  return `"""
Pipeline definition for ${pipelineName} pipeline.
Generated by Kedro Pipeline Builder.

This module defines the structure of your pipeline by connecting nodes
with their input and output datasets.
"""

from kedro.pipeline import Pipeline, node${imports ? '\n' : ''}${imports ? `from .nodes import ${imports}` : ''}


def create_pipeline(**kwargs) -> Pipeline:
    """
    Create the ${pipelineName} pipeline.

    Returns:
        A Kedro Pipeline object containing all nodes.
    """
    return Pipeline(
        [
${nodesStr}
        ]
    )
`;
}

/**
 * Generate a single node definition for the pipeline
 */
function generateNodeDefinition(
  node: KedroNode,
  connections: KedroConnection[],
  datasets: Record<string, KedroDataset>
): string {
  const funcName = toSnakeCase(node.name);
  const inputs = getNodeInputDatasets(node, connections, datasets);
  const outputs = getNodeOutputDatasets(node, connections, datasets);

  const inputsStr = formatNodeInputs(inputs);
  const outputsStr = formatNodeOutputs(outputs);
  const nodeName = `${funcName}_node`;

  return `node(
                func=${funcName},
                inputs=${inputsStr},
                outputs=${outputsStr},
                name="${nodeName}",
            )`;
}

/**
 * Get input dataset names for a node
 */
function getNodeInputDatasets(
  node: KedroNode,
  connections: KedroConnection[],
  datasets: Record<string, KedroDataset>
): string[] {
  const inputs: string[] = [];

  connections.forEach((conn) => {
    // Find connections where dataset -> node
    if (conn.target === node.id && conn.source.startsWith('dataset-')) {
      const dataset = datasets[conn.source];
      if (dataset) {
        inputs.push(dataset.name);
      }
    }
  });

  return inputs;
}

/**
 * Get output dataset names for a node
 */
function getNodeOutputDatasets(
  node: KedroNode,
  connections: KedroConnection[],
  datasets: Record<string, KedroDataset>
): string[] {
  const outputs: string[] = [];

  connections.forEach((conn) => {
    // Find connections where node -> dataset
    if (conn.source === node.id && conn.target.startsWith('dataset-')) {
      const dataset = datasets[conn.target];
      if (dataset) {
        outputs.push(dataset.name);
      }
    }
  });

  return outputs;
}
